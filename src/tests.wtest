import alimentosFrutales.*
import config.*
import posicionamiento.*
import objects.*
import obstaculos.*
import wollok.game.*

describe "Acciones de Pikachu" {
	
	method initialize() {
		config.dimensiones()
	}
	
	test "PIKACHU y su ENERGIA al COMER FRUTAS...
		Pikachu, inicia con 100 de energia.
		Come un anana y adquiere su energia y queda en 180.
		Come una baya y adquiere su energia negativa y queda en 130.
		Come un platano y adquiere su energia y queda en 180." {
		// Estado inicial pedido:
		const manzana = new Manzana()
		const baya    = new Baya()
		const banana  = new Banana()
		// Caso prueba:
		assert.equals(100, pikachu.energia())
		pikachu.comerFruta(manzana)
		assert.equals(180, pikachu.energia())
		pikachu.comerFruta(baya)
		assert.equals(130, pikachu.energia())
		pikachu.comerFruta(banana)
		assert.equals(180, pikachu.energia())
	}
	
	test "PIKACHU y sus MOVIMIENTOS posibles...
		Pikachu, se mueve hacia los 4 lados desde la celda (5,5)." {
		// Estado inicial pedido:
		pikachu.position(game.at(5,5))
		// Caso prueba:
		pikachu.mover(derecha)
		assert.equals(game.at(6,5), pikachu.position())
		pikachu.mover(izquierda)
		assert.equals(game.at(5,5), pikachu.position())
		pikachu.mover(arriba)
		assert.equals(game.at(5,6), pikachu.position())
		pikachu.mover(abajo)
		assert.equals(game.at(5,5), pikachu.position())
	}
	
	test "PIKACHU y sus MOVIMIENTOS imposibles...
		Pikachu, se quiere mover hacia la pared y no puede,
		porque la pared no es atravesable." {
		// Estado inicial pedido:
		pikachu.position(game.at(5,5))
		const pared = new Pared(position = game.at(6,5))
		game.addVisual(pared)
		// Caso prueba:
		assert.equals(game.at(6,5), pared.position())
		assert.notThat(pikachu.puedeMover(derecha))
		assert.throwsException( {pikachu.validarMover(derecha)} )
	}
}

